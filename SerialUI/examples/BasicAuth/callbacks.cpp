

/*
 * callbacks.cpp -- part of the BasicAuth project.
 * Implementation of callbacks -- YOUR code goes here!
 * Pat Deegan
 * Psychogenic.com 
 * 
 * Copyright (C) 2019 Pat Deegan, psychogenic.com
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "f479e26ae09b4eab8cb47b1383145f81zGgk4QUJUp",
 * aka BasicAuth.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2019 Pat Deegan 
 * [https://psychogenic.com/ | https://inductive-kickback.com/]
 * and distributed under the terms of their respective licenses.
 * See https://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include <SerialUI.h>
#include "BasicAuthSettings.h"

/* our project specific types and functions are here */
#include "BasicAuth.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.When (Event)
 *    MyInputs.YesOrNo (Toggle)
 *    MyInputs.LimitedChoice (BoundedLong)
 *    MyInputs.Name (String)
 *    MyInputs.Options (OptionsList)
 *  
 *  
 *  
 * 
 */






/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {


void doClickMe() {

    /* click me triggered */
	/* We'll act a bit differently, depending on whether you used
	 * the admin, user or guest password to gain access.
	 */
    if (SerialUI::Globals::authenticator()->accessIsAtLeast(SerialUI::Auth::Level::User))
    {
      
      if (SerialUI::Globals::authenticator()->accessLevel()
    		  == SerialUI::Auth::Level::Admin)
      {
        MySUI.println(F("Why, hello, admin... "));
      }
      
      MySUI.println(F("click me triggered!"));
      
      
    } else {
      MySUI.println(F("Guest can always click but NOTHING HAPPENS!!1!"));
    }


}

void YesOrNoChanged() {

    /* Yes Or No value was modified.
    * It is a bool accessible in MyInputs.YesOrNo
    */
    MySUI.print(F("Yes Or No is now:"));
    MySUI.println(MyInputs.YesOrNo ? F("ON") : F("OFF"));

}

void LimitedChoiceChanged() {

    /* Limited Choice value was modified.
    * It is a long int accessible in MyInputs.LimitedChoice
    */
    MySUI.print(F("Limited Choice is now:"));
    MySUI.println(MyInputs.LimitedChoice);

}

void NameChanged() {

    /* Name value was modified.
    * It is a String accessible in MyInputs.Name
    */
    MySUI.print(F("Name is now:"));
    MySUI.println(MyInputs.Name);

}

void OptionsChanged() {

    /* Options value was modified.
    * It is a long int accessible in MyInputs.Options
    */


    MySUI.print(F("Options is now: ("));
    MySUI.print(MyInputs.Options);
    MySUI.print(F(") "));
    MySUI.println(MyInputs.Options.currentSelection());
}




/* *** Main Menu -> sub menu *** */
namespace SubMenu {


void WhenChanged() {

   /* When value was modified.
    * It is a unsigned long int accessible in MyInputs.When
    * The raw value, MyInputs.When, is some ugly uint32, 
    * instead, we use the timeValue() member method to get an
    * Event::TimeElements
    */
    
    SerialUI::Menu::Item::Request::Event::TimeElements te = MyInputs.When.timeValue();
    MySUI.print(F("When is on "));
    switch (te.day) {
        case SerialUI::Weekday::ANY:
                MySUI.println(F("any and all days..."));
                break;
        case SerialUI::Weekday::Sunday:
                MySUI.println(F("Sunday!"));
                break;
        case SerialUI::Weekday::Saturday:
                MySUI.println(F("Saturday!"));
                break;
        default:
                /* you get the idea... */
                MySUI.println(F("some boring weekday"));
                break;

    }
    MySUI.print(F("It is from "));
    MySUI.print((int)te.startHour);
    MySUI.print(':');
    MySUI.print((int)te.startMinute);
    MySUI.print(':');
    MySUI.print((int)te.startSecond);
    MySUI.print(F(" until "));
    MySUI.print((int)te.endHour);
    MySUI.print(':');
    MySUI.println((int)te.endMinute);
    // note there's no "endSecond" to get it all to find in 4 bytes.


}

void doAnotherCommand() {

    /* another command triggered */
    MySUI.println(F("another command triggered!"));

}




} /* namespace SubMenu */









} /* namespace MainMenu */
