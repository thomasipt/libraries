

/*
 * callbacks.cpp -- part of the AllWidgets project.
 * Implementation of callbacks -- YOUR code goes here!
 * Pat Deegan
 * Psychogenic.com 
 * 
 * Copyright (C) 2019 Pat Deegan
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "b4cf0e8f5cb24a839ec218119f68cfc0lEUPnNbYtz",
 * aka AllWidgets.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2019 Pat Deegan 
 * [https://psychogenic.com/ | https://inductive-kickback.com/]
 * and distributed under the terms of their respective licenses.
 * See https://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include <SerialUI.h>
#include "AllWidgetsSettings.h"

/* our project specific types and functions are here */
#include "AllWidgets.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.OnOrOff (Toggle)
 *    MyInputs.HowMuch (BoundedLong)
 *    MyInputs.ShortList (OptionsList)
 *    MyInputs.LongerList (OptionsList)
 *    MyInputs.RandomNumber (Long)
 *    MyInputs.SomeText (String)
 *    MyInputs.TimeOfDay (Time)
 *    MyInputs.ADateAndTime (DateTime)
 *    MyInputs.EventField (Event)
 *    MyInputs.ASwitch (Toggle)
 *    MyInputs.SomeNumber (Long)
 *    MyInputs.Chars (String)
 *    MyInputs.Ranger (BoundedLong)
 *    MyInputs.Num (Long)
 *    MyInputs.ATimeOfDay (Time)
 *    MyInputs.ASwitch2 (Toggle)
 *    MyInputs.Pi (Float)
 *    MyInputs.Intensity (BoundedLong)
 *    MyInputs.Name (String)
 *    MyInputs.BigDate (DateTime)
 *    MyInputs.Vet (Event)
 *  
 *  
 *  
 * *** MyTracked -- a container for values tracked
 * by druid and displayed to users in "state" pane.  Changes to:
 * 
 *    MyTracked.Lights (SerialUI::Tracked::Toggle)
 *    MyTracked.Integer (SerialUI::Tracked::Integer)
 *    MyTracked.Decimal (SerialUI::Tracked::Float)
 *    MyTracked.Members (SerialUI::Tracked::Integer)
 *    MyTracked.ChatLog (SerialUI::Tracked::String)
 *    MyTracked.Heat (SerialUI::Tracked::Toggle)
 * 
 * will automatically be reported to the UI, on the next refresh/ping.
 * 
 * 
 */



uint8_t counter = 0;
// "heartbeat" function, called periodically while connected
void CustomHeartbeatCode () {

  counter++;

  if (counter % 50 == 0) {
    MyTracked.Lights = !((bool)MyTracked.Lights);
    
  }
  if (counter % 40 == 0) {
    MyTracked.Heat = !((bool)MyTracked.Heat);
    if ((bool)MyTracked.Heat) {
      MyTracked.ChatLog = "I turned on the heater";
    } else {
      
      MyTracked.ChatLog = "Too warm in here, heat off";
    }
  }

  if (counter % 34 == 0) {
    MyTracked.ChatLog = "Someone has entered the room";
  }

  if (counter % 70 == 0) {
    
    MyTracked.ChatLog = "Room now empty";
  }

  if (counter % 10 == 0) {
    MyTracked.Members = (counter % 25);
  }

  if (counter % 7 == 0) {
    MyTracked.Integer += 1;
    if ( ((int)MyTracked.Integer)  > 90 ) {
      MyTracked.Integer = 1;
    }
    MyTracked.Decimal = (float)(MyTracked.Decimal);
  }

  if (counter % 4 == 0) {
    MyTracked.Decimal = 35 * sin(1.0 * counter);
    MyTracked.Integer = (int)MyTracked.Integer;
  }

 
} 

/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {


void ColourChanged() {
  
    MySUI.println(F("Colour changed"));
}

void doRunMe() {

    /* Run me triggered */
    MySUI.println(F("Run me triggered!"));

}

void doAnotherCommand() {

    /* Another Command triggered */
    MySUI.println(F("Another Command triggered!"));

}

void OnOrOffChanged() {

    /* On or Off value was modified.
    * It is a bool accessible in MyInputs.OnOrOff
    */
    MySUI.print(F("On or Off is now:"));
    MySUI.println(MyInputs.OnOrOff ? F("ON") : F("OFF"));

}

void HowMuchChanged() {

    /* How much value was modified.
    * It is a long int accessible in MyInputs.HowMuch
    */
    MySUI.print(F("How much is now:"));
    MySUI.println(MyInputs.HowMuch);

}

void ShortListChanged() {

    /* Short list value was modified.
    * It is a long int accessible in MyInputs.ShortList
    */
    MySUI.print(F("Short list is now:"));
    MySUI.println(MyInputs.ShortList);

}

void LongerListChanged() {

    /* Longer List value was modified.
    * It is a long int accessible in MyInputs.LongerList
    */
    MySUI.print(F("Longer List is now:"));
    MySUI.println(MyInputs.LongerList);

}

void RandomNumberChanged() {

    /* Random number value was modified.
    * It is a long int accessible in MyInputs.RandomNumber
    */
    MySUI.print(F("Random number is now:"));
    MySUI.println(MyInputs.RandomNumber);

}

void SomeTextChanged() {

    /* Some Text value was modified.
    * It is a String accessible in MyInputs.SomeText
    */
    MySUI.print(F("Some Text is now:"));
    MySUI.println(MyInputs.SomeText);

}

void TimeOfDayChanged() {

   /* Time of day value was modified.
    * It is a unsigned long int accessible in MyInputs.TimeOfDay
    * The raw value, MyInputs.TimeOfDay, is some ugly uint32, 
    * instead, we use the timeValue() member method to get a
    * Time::TimeElements
    */
    
    SerialUI::Menu::Item::Request::Time::TimeElements te = MyInputs.TimeOfDay.timeValue();
    
    MySUI.print(F("Time is set to "));
    
    if (te.hour < 10)
        MySUI.print('0');
    MySUI.print((int)te.hour);
    
    MySUI.print(':'); 
    
    if (te.minute < 10)
        MySUI.print('0');
    MySUI.print((int)te.minute);
    
    MySUI.print(':');
    
    if (te.second < 10)
        MySUI.print('0');
    MySUI.println((int)te.second);


}

void ADateAndTimeChanged() {


    /* A date and time value was modified.
    * It is a unsigned long int accessible in MyInputs.ADateAndTime.
    * The value is the unix epoch, i.e. seconds since 
    * the days of Led Zep.
    */
    MySUI.print(F("A date and time set to epoch: "));
    MySUI.println(MyInputs.ADateAndTime);


}

void EventFieldChanged() {

   /* Event field value was modified.
    * It is a unsigned long int accessible in MyInputs.EventField
    * The raw value, MyInputs.EventField, is some ugly uint32, 
    * instead, we use the timeValue() member method to get an
    * Event::TimeElements
    */
    
    SerialUI::Menu::Item::Request::Event::TimeElements te = MyInputs.EventField.timeValue();
    MySUI.print(F("Event field is on "));
    switch (te.day) {
        case SerialUI::Weekday::ANY:
                MySUI.println(F("any and all days..."));
                break;
        case SerialUI::Weekday::Sunday:
                MySUI.println(F("Sunday!"));
                break;
        case SerialUI::Weekday::Saturday:
                MySUI.println(F("Saturday!"));
                break;
        default:
                /* you get the idea... */
                MySUI.println(F("some boring weekday"));
                break;

    }
    MySUI.print(F("It is from "));
    MySUI.print((int)te.startHour);
    MySUI.print(':');
    MySUI.print((int)te.startMinute);
    MySUI.print(':');
    MySUI.print((int)te.startSecond);
    MySUI.print(F(" until "));
    MySUI.print((int)te.endHour);
    MySUI.print(':');
    MySUI.println((int)te.endMinute);
    // note there's no "endSecond" to get it all to find in 4 bytes.


}




/* *** Main Menu -> Menu 1 *** */
namespace Menu1 {



} /* namespace Menu1 */





/* *** Main Menu -> Menu 2 *** */
namespace Menu2 {



} /* namespace Menu2 */





/* *** Main Menu -> Menu 3 *** */
namespace Menu3 {



} /* namespace Menu3 */



















/* *** Main Menu -> Group A *** */
namespace GroupA {


void ASwitchChanged() {

    /* A switch value was modified.
    * It is a bool accessible in MyInputs.ASwitch
    */
    MySUI.print(F("A switch is now:"));
    MySUI.println(MyInputs.ASwitch ? F("ON") : F("OFF"));

}

void SomeNumberChanged() {

    /* Some number value was modified.
    * It is a long int accessible in MyInputs.SomeNumber
    */
    MySUI.print(F("Some number is now:"));
    MySUI.println(MyInputs.SomeNumber);

}

void CharsChanged() {

    /* Chars value was modified.
    * It is a String accessible in MyInputs.Chars
    */
    MySUI.print(F("Chars is now:"));
    MySUI.println(MyInputs.Chars);

}

void RangerChanged() {

    /* Ranger value was modified.
    * It is a long int accessible in MyInputs.Ranger
    */
    MySUI.print(F("Ranger is now:"));
    MySUI.println(MyInputs.Ranger);

}






} /* namespace GroupA */





/* *** Main Menu -> Group B *** */
namespace GroupB {


void NumChanged() {

    /* num value was modified.
    * It is a long int accessible in MyInputs.Num
    */
    MySUI.print(F("num is now:"));
    MySUI.println(MyInputs.Num);

}

void ATimeOfDayChanged() {

   /* A time of day value was modified.
    * It is a unsigned long int accessible in MyInputs.ATimeOfDay
    * The raw value, MyInputs.ATimeOfDay, is some ugly uint32, 
    * instead, we use the timeValue() member method to get a
    * Time::TimeElements
    */
    
    SerialUI::Menu::Item::Request::Time::TimeElements te = MyInputs.ATimeOfDay.timeValue();
    
    MySUI.print(F("Time is set to "));
    
    if (te.hour < 10)
        MySUI.print('0');
    MySUI.print((int)te.hour);
    
    MySUI.print(':'); 
    
    if (te.minute < 10)
        MySUI.print('0');
    MySUI.print((int)te.minute);
    
    MySUI.print(':');
    
    if (te.second < 10)
        MySUI.print('0');
    MySUI.println((int)te.second);


}

void ASwitch2Changed() {

    /* A switch value was modified.
    * It is a bool accessible in MyInputs.ASwitch2
    */
    MySUI.print(F("A switch is now:"));
    MySUI.println(MyInputs.ASwitch2 ? F("ON") : F("OFF"));

}

void doDoit() {

    /* doit triggered */
    MySUI.println(F("doit triggered!"));

}






} /* namespace GroupB */





/* *** Main Menu -> Group C *** */
namespace GroupC {


void PiChanged() {

    /* Pi value was modified.
    * It is a float accessible in MyInputs.Pi
    */
    MySUI.print(F("Pi is now:"));
    MySUI.println(MyInputs.Pi);

}

void IntensityChanged() {

    /* Intensity value was modified.
    * It is a long int accessible in MyInputs.Intensity
    */
    MySUI.print(F("Intensity is now:"));
    MySUI.println(MyInputs.Intensity);

}







/* *** Main Menu -> Group C -> Subsub *** */
namespace Subsub {


void doClickMe() {

    /* Click me triggered */
    MySUI.println(F("Click me triggered!"));

}



} /* namespace Subsub */



} /* namespace GroupC */





/* *** Main Menu -> Another Group *** */
namespace AnotherGroup {


void NameChanged() {

    /* Name value was modified.
    * It is a String accessible in MyInputs.Name
    */
    MySUI.print(F("Name is now:"));
    MySUI.println(MyInputs.Name);

}

void BigDateChanged() {


    /* Big Date value was modified.
    * It is a unsigned long int accessible in MyInputs.BigDate.
    * The value is the unix epoch, i.e. seconds since 
    * the days of Led Zep.
    */
    MySUI.print(F("Big Date set to epoch: "));
    MySUI.println(MyInputs.BigDate);


}

void VetChanged() {

   /* Vet value was modified.
    * It is a unsigned long int accessible in MyInputs.Vet
    * The raw value, MyInputs.Vet, is some ugly uint32, 
    * instead, we use the timeValue() member method to get an
    * Event::TimeElements
    */
    
    SerialUI::Menu::Item::Request::Event::TimeElements te = MyInputs.Vet.timeValue();
    MySUI.print(F("Vet is on "));
    switch (te.day) {
        case SerialUI::Weekday::ANY:
                MySUI.println(F("any and all days..."));
                break;
        case SerialUI::Weekday::Sunday:
                MySUI.println(F("Sunday!"));
                break;
        case SerialUI::Weekday::Saturday:
                MySUI.println(F("Saturday!"));
                break;
        default:
                /* you get the idea... */
                MySUI.println(F("some boring weekday"));
                break;

    }
    MySUI.print(F("It is from "));
    MySUI.print((int)te.startHour);
    MySUI.print(':');
    MySUI.print((int)te.startMinute);
    MySUI.print(':');
    MySUI.print((int)te.startSecond);
    MySUI.print(F(" until "));
    MySUI.print((int)te.endHour);
    MySUI.print(':');
    MySUI.println((int)te.endMinute);
    // note there's no "endSecond" to get it all to find in 4 bytes.


}





} /* namespace AnotherGroup */








} /* namespace MainMenu */
