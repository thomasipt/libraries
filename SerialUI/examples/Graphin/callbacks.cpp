

/*
 * callbacks.cpp -- part of the Graphin project.
 * Implementation of callbacks -- YOUR code goes here!
 * Pat Deegan
 * Psychogenic.com 
 * 
 * Copyright (C) 2019 Pat Deegan, psychogenic.com
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "f1cce9edcde145b08daf90b107f23f128y5gJi5v7c",
 * aka Graphin.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2018 Pat Deegan 
 * [https://psychogenic.com/ | https://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See https://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include "GraphinSettings.h"

/* our project specific types and functions are here */
#include "Graphin.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.Baseline (BoundedLong)
 *  
 *  
 *  
 * *** MyTracked -- a container for values tracked
 * by druid and displayed to users in "state" pane.  Changes to:
 * 
 *    MyTracked.Triangle (SerialUI::Tracked::Integer)
 *    MyTracked.Sine (SerialUI::Tracked::Float)
 *    MyTracked.Who (SerialUI::Tracked::String)
 *    MyTracked.Setting (SerialUI::Tracked::Float)
 * 
 * will automatically be reported to the UI, on the next refresh/ping.
 * 
 * 
 */




// "heartbeat" function, called periodically while connected
void CustomHeartbeatCode () {
  static int counter = 0; // a value we'll increment on each call
  static uint8_t last_user = 0;
  const char * names[] = {
    "Bob",
    "Sandy",
    "Ralph",
    "Julia",
    "Sam",
    "Sean"
  };
  
  
  counter++;
  if (counter % 15 == 0) {
    uint8_t seluseridx = 0;
    do {
      seluseridx = random(100) % 6;
      
    } while (seluseridx == last_user);
    
    last_user = seluseridx;
    
    String changedUser("User now ");
    changedUser += names[seluseridx];;
    MyTracked.Who = changedUser.c_str();
  }
  if (counter > 100) {
    counter = 0;
  }

  MyTracked.Triangle += 4;
  if (MyTracked.Triangle > 80) {
    MyTracked.Triangle = 0;
  }
  MyTracked.Sine = 15.0 + ((int)MyInputs.Baseline * sin(counter));
  MyTracked.Setting = MyInputs.Baseline; // do this to ensure our graph stays in sync

  

} 

/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {


void BaselineChanged() {

    /* Baseline value was modified.
    * It is a long int accessible in MyInputs.Baseline
    */
    MySUI.print(F("Baseline is now:"));
    MySUI.println(MyInputs.Baseline);

}







} /* namespace MainMenu */
