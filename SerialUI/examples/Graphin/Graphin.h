
#ifndef _Graphin_Graphin_h
#define _Graphin_Graphin_h


/*
 * Graphin.h -- part of the Graphin project.
 * Declarations for everything that was generated...
 * Pat Deegan
 * Psychogenic.com 
 * 
 * Copyright (C) 2019 Pat Deegan, psychogenic.com
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "f1cce9edcde145b08daf90b107f23f128y5gJi5v7c",
 * aka Graphin.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2018 Pat Deegan 
 * [https://psychogenic.com/ | https://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See https://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */



/* we need the SerialUI lib */
#include <SerialUI.h>


/* MySUI
 * Our SerialUI Instance, through which we can send/receive
 * data from users.
 */ 
extern SUI::SerialUI MySUI;







// "heartbeat" function, called periodically while connected
void CustomHeartbeatCode(); 

/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {

void BaselineChanged();

} /* namespace MainMenu */



/* MyTracked
 * A structure to hold the tracked variables, which will 
 * automatically update the druid UI when modified by this 
 * program.
 */
typedef struct MyTrackedVarsContainerStruct{
	
	SerialUI::Tracked::Integer Triangle;
	SerialUI::Tracked::Float Sine;
	SerialUI::Tracked::String Who;
	SerialUI::Tracked::Float Setting;
	// constructor to set sane startup vals
	MyTrackedVarsContainerStruct() : 
	Triangle(SUI_STR("Triangle"),0),
	Sine(SUI_STR("Sine"),0),
	Who(SUI_STR("Who"),""),
	Setting(SUI_STR("Setting"),0)
	{}
} MyTrackedVarsContainerSt;

extern MyTrackedVarsContainerSt MyTracked;



/*
 * The container for MyInputs, which
 * holds all the variables for the various inputs.
 */
typedef struct MyInputsContainerStruct {
	
	SerialUI::Menu::Item::Request::BoundedLong Baseline;
	// constructor to set sane startup vals
	MyInputsContainerStruct() : 
		Baseline(10,SUI_STR("Baseline"),SUI_STR("configurable baseline"),1,75,MainMenu::BaselineChanged)
	{}
} MyInputsContainerSt;

extern MyInputsContainerSt MyInputs;



/*
 * This container holds all the tracked variable views.
 */
typedef struct MyTrackedViewsContainerStruct {
	
	SerialUI::Menu::Item::View::LineBasic LineChart;
	SerialUI::Menu::Item::View::PieChart Pie;
	SerialUI::Menu::Item::View::HistoryLog Log;
  SerialUI::Menu::Item::View::CurrentValue CurVals;
	// constructor to set sane startup vals
	MyTrackedViewsContainerStruct() : 
		LineChart(SUI_STR("LineChart"),SUI_STR("Three vars on line chart")),
		Pie(SUI_STR("Pie"),SUI_STR("Two value split")),
		Log(SUI_STR("Log"),SUI_STR("Who's around")),
    CurVals(SUI_STR("Current"), SUI_STR("Real-time values"))
	{}
} MyTrackedViewsContainerSt;
extern MyTrackedViewsContainerSt MyViews;



/* ***** SetupSerialUI: where we'll be setting up menus and such **** */
bool SetupSerialUI();


#define DIE_HORRIBLY(msg)	for(;;){ MySUI.println(msg); delay(1000); }


#endif
